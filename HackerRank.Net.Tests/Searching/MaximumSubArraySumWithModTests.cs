using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using HackerRank.Net.Searching;
using System.Linq;
using System.IO;

namespace HackerRank.Net.Tests.Searching
{
    [TestClass]
    public class MaximumSubArraySumWithModTests
    {
        [TestMethod]
        public void ComputeMaxSubArraySum_WhenTest0_Returns6()
        {
            // Arrange
            ulong[] input = new ulong[] { 3, 3, 9, 9, 5 };
            ulong mod = 7;
            ulong expected = 6;

            // Act
            ulong actual = MaximumSubArraySumWithMod.ComputeMaxSubArraySum(input, mod);

            // Assert
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void ComputeMaxSubArraySum_WhenTest1_Return()
        {
            // Arrange
            ulong[] input = "846930887 1681692778 1714636916 1957747794 424238336 719885387 1649760493 596516650 1189641422 1025202363 1350490028 783368691 1102520060 2044897764 1967513927 1365180541 1540383427 304089173 1303455737 35005212 521595369 294702568 1726956430 336465783 861021531 278722863 233665124 2145174068 468703136 1101513930 1801979803 1315634023 635723059 1369133070 1125898168 1059961394 2089018457 628175012 1656478043 1131176230 1653377374 859484422 1914544920 608413785 756898538 1734575199 1973594325 149798316 2038664371 1129566414".Split(' ').Select(x=>ulong.Parse(x)).ToArray();
            ulong mod = 1804289384;
            ulong expected = 1802192837;

            // Act
            ulong actual = MaximumSubArraySumWithMod.ComputeMaxSubArraySum(input, mod);

            // Assert
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void ComputeMaxSubArraySum_WhenTest4_1_Return()
        {
            // Arrange
            ulong[] inputplit(' ').Select(x => ulong.Parse(x)).ToArray();
            ulong mod = 1987076915;
            ulong expected = 1987054712;

            // Act
            ulong actual = MaximumSubArraySumWithMod.ComputeMaxSubArraySum1(input, mod);

            // Assert
            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void ComputeMaxSubArraySum_WhenTest4_Full_Return()
        {
            // Arrange
            var lines = File.ReadAllLines(@"c:\temp\test4.txt");
            for (int i = 0; i < 1250; i++)
            {
                ulong[] input;
                ulong mod = 0;
                ulong expected = 0;

                if (i % 2 == 1)
                {
                    input = lines[i].Split(' ').Select(x => ulong.Parse(x)).ToArray();
                    // Act
                    ulong actual = MaximumSubArraySumWithMod.ComputeMaxSubArraySum(input, mod);

                    // Assert
                  //  Assert.AreEqual(expected, actual);
                }
                else
                {
                    mod = ulong.Parse(lines[i].Split(' ')[1]);
                }
            }
        }
    }
}
